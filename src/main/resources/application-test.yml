spring:
  datasource:
    url: jdbc:h2:mem:apitest;DB_CLOSE_DELAY=-1
    username: sa
    password:
    driver-class-name: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
  profiles:
    active: test
logging:
  level:
    root: INFO
package com.example.apigestao.advice;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.example.apigestao.dto.DadosDetalhamentoErro;
import com.example.apigestao.dto.DadosDetalhamentoErroMessage;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<List<DadosDetalhamentoErro>> handleValidation(MethodArgumentNotValidException ex) {
        List<DadosDetalhamentoErro> erros = ex.getBindingResult()
            .getFieldErrors()
            .stream()
            .map(this::toDetalhamento)
            .collect(Collectors.toList());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(erros);
    }

    private DadosDetalhamentoErro toDetalhamento(FieldError fe) {
        return new DadosDetalhamentoErro(fe.getField(), fe.getDefaultMessage());
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<DadosDetalhamentoErroMessage> handleGeneric(Exception ex) {
        // Log se necess√°rio
        DadosDetalhamentoErroMessage msg = new DadosDetalhamentoErroMessage(ex.getMessage() != null ? ex.getMessage() : "Erro interno");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(msg);
    }
}

